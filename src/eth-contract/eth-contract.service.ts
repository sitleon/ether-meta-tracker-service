import { Injectable, OnModuleInit } from '@nestjs/common';
import fs = require('fs');
import path = require('path');
import { ethers, BigNumber } from 'ethers';

import { EthProviderService } from '../eth-provider/eth-provider.service';
import type { blockMeta } from '../eth-provider/eth-provider.interface';
import { EthSignerService } from '../eth-signer/eth-signer.service';

@Injectable()
export class EthContractService implements OnModuleInit {
    private readonly artifact: any;
    private contract: ethers.Contract;

    constructor(
        private readonly provider: EthProviderService,
        private readonly signer: EthSignerService,
    ) {
        /**
         * load the contract artifact, which was generated by Remix
         */
        this.artifact = JSON.parse(
            fs
                .readFileSync(
                    path.join(
                        __dirname,
                        '../../contracts/protocols/artifacts/BoringMeta.json',
                    ),
                )
                .toString(),
        );
    }

    private async deploy() {
        if (!!this.contract || !!process.env.ETH_CONTRACT_ADDRESS) {
            return;
        }

        const factory = new ethers.ContractFactory(
            this.artifact.abi,
            this.artifact.data.bytecode.object,
            this.signer.getSigner(),
        );

        /**
         * deploy to new address
         */
        const price = ethers.utils.formatUnits(
            await this.provider.getProvider().getGasPrice(),
            'gwei',
        );
        const deployArgs = {
            gasLimit: 100000,
            gasPrice: ethers.utils.parseUnits(price, 'gwei'),
        };

        this.contract = await factory.deploy(deployArgs);
        await this.contract.deployed();
    }

    private async connect() {
        switch (true) {
            case !!this.contract: {
                return;
            }
            case !!process.env.ETH_CONTRACT_ADDRESS: {
                this.contract = new ethers.Contract(
                    process.env.ETH_CONTRACT_ADDRESS,
                    this.artifact.abi,
                    this.signer.getSigner(),
                );
                return;
            }
            default: {
                await this.deploy();
            }
        }
    }

    async updateDailyMeta(meta: blockMeta) {
        await this.contract.updateDailyMeta(
            BigNumber.from(meta.timestamp),
            BigNumber.from(meta.gasUsed),
            meta.numberOfBlocks,
        );
    }

    async onModuleInit() {
        await this.connect();
    }
}
